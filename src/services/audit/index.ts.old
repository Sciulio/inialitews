import path from 'path';

import 'async-extensions';
import { logger } from '../../libs/logger';

import Datastore from 'nedb';

import { loadConfiguration } from '../../libs/config';
import { tServiceExporter } from '../../libs/exporters';
import { docFileAudit } from './types';


const config = loadConfiguration();

//TODO: set a lib:package for this VVVVVVVVVV

//TODO: set a lib:package for this AAAAAAAA

const dbs: {[key: string]: {
  db: Datastore,
  on: number
}} = {};

export default {
  order: 100,
  init: async function() {
    await Object.keys(config.tenants)
    .forEachAsync(async tenantKey => {
      const tenant = config.tenants[tenantKey];
      const dbFileName = path.join(config.target.root, tenant.name, "audit.nedb");
      const db = new Datastore({
        filename: dbFileName
      });
      
      await new Promise((res, rej) => {
        db.loadDatabase((err) => {
          if (err) {
            rej(err);
          } else {
            logger.info(` - initted db for tenant: ${tenant.name}`);

            dbs[tenant.name] = {
              db,
              on: Date.now()
            };

            res();
          }
        });
      });
    });
  },
  dispose: async function() {
    
  }
} as tServiceExporter;

export async function fetchFileAudit(tenantName: string, url: string) {
  const db = dbs[tenantName].db;

  return new Promise<docFileAudit>((res, rej) => {
    db.findOne<docFileAudit>({
      url
    }, function (err, doc) {
      // doc is the document Mars
      // If no document is found, doc is null
      err ? rej(err) : res(doc);
    });
  });
}